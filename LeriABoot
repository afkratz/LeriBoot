r1 = 63 //Comments in LeriA can be written directly into the code as long as they are after the instruction in a line. The assembler ignores anything that isn't a valid instruction
JTA = r1 //these first three lines set a register equal to 63, then set the jump-target to that register, then jump to the jump-target
jump true //this maintains most of the first 64 bytes of ram as empty and easilly accessible by pointers. Leri can only assign 6 bits(0-63) to a register in one command, so these addresses are the fastest to get to arbitrarily.

value 1000 // i abitrarily decided we're gonna insert code at RAM 1000, then jump to that. 
value 106 //this is the start of the flash reading loop
























































r1 = b100000 
flash r1 //one bit sent
r1 = b000000 
flash r1 //bit two
flash r1 //bit three 
flash r1 //bit four 
flash r1 //five
flash r1 //six
r1 = b001111 seven and eight are ones
flash r1 //seven
flash r1 //eight
r1 = b000000 going to send address 0
flash r1 
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1
flash r1 // wow we just sent 0000 to the chips 24 times! now the chips will start sending us bits from flash memory one each at a time untill we flash them 010000 to turn them off
r1 = 6
r2 = ram r1 //point at start of Flash reading loop
JTA = r2 //if you jump, jump to the start of the flash reading loop
r1 = 5
r2 = ram r1 // now r2 = 1000
r3 = r2 // r3 ALSO equals 1000, but this one is going to get incremented
r7 = 0 
r7 = ! r7 // now r7 is all ones. This is going to be my code for "end of program" in the flash, and will trigger this program to jump to address 1000 and start running whatever we loaded out of the flash
r5 = flash //START OF THE FLASH READINNG LOOP: grab 4 bits from flash and put them in the low 4 bits of r5
r6 = r5 + r5 //shift r5 up by one bit, store in r6 for s a f e k e e p i n g
r6 = r6 + r6 //shift r6 up to make room for more bits, continue below
r6 = r6 + r6
r6 = r6 + r6
r5 = flash // grab 4 bits from flash and put them in the low 4 bits of r5
r6 = r5 + r6 //affix the lower 4 bits of r5 (from flash) to r6
r6 = r6 + r6 //shift r6 up to make room for more bits, continue below
r6 = r6 + r6
r6 = r6 + r6
r6 = r6 + r6
r5 = flash // grab 4 bits from flash and put them in the low 4 bits of r5
r6 = r5 + r6 //affix the lower 4 bits of r5 (from flash) to r6
r6 = r6 + r6 //shift r6 up to make room for more bits, continue below
r6 = r6 + r6
r6 = r6 + r6
r6 = r6 + r6
r5 = flash // grab 4 bits from flash and put them in the low 4 bits of r5
r6 = r5 + r6 //affix the lower 4 bits of r5 (from flash) to r6. Now r6 contains 16 bits from flash all in a row. Time to send them to ram (if they do NOT equal -1)
ram r3 = r6 //send r6 to the point where we're putting out code.
r5 = 1 //r5 is free right now, so lets use it to increment r3
r3 = r3 + r5 // now we're pointing at the next byte we may want to write
jump r6 < r7 //This will jump as long as r6 does NOT equal all ones. If it DOES, that means that the program has finished being loaded and we should jump to it
JTA = r2 // remember how r2 was set equal to 1000 on line 102? time to j u m p to it
jump true // and we jump into the program loaded at RAM 1000 that we loaded out of the flash memory
